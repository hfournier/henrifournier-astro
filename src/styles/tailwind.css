@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
	@property --color-primary {
		syntax: "<color>";
		inherits: false;
		initial-value: #cc5500;
	}

	@property --color-grayish-sat {
		syntax: "<percentage>";
		inherits: false;
		initial-value: 5%;
	}

	@property --color-dark-step {
		syntax: "<percentage>";
		inherits: false;
		initial-value: 8.5%;
	}

	@property --color-light-step {
		syntax: "<percentage>";
		inherits: false;
		initial-value: 10.5%;
	}

	:root {
		@property --color-blob-from {
			syntax: "<color>";
			inherits: false;
			initial-value: #cc5500;
		}
		@property --color-blob-to {
			syntax: "<color>";
			inherits: false;
			initial-value: lightgray;
		}
		@property --color-shirt {
			syntax: "<color>";
			inherits: false;
			initial-value: dodgerblue;
		}

		--color-blob-from: theme(colors.primary.600);
		--color-blob-to: theme(colors.grayish.50);
		--color-shirt: theme(colors.secondary.600);
	}

	html[data-theme="dark"] {
		--color-blob-to: theme(colors.grayish.950);
	}

	.scrollable::-webkit-scrollbar {
		@apply h-2 w-2 bg-grayish-100 dark:bg-grayish-800;
	}
	.scrollable::-webkit-scrollbar-track {
		@apply my-1 rounded-full bg-grayish-100 dark:bg-grayish-800;
	}
	.scrollable::-webkit-scrollbar-thumb {
		@apply rounded-full bg-grayish-300 hover:bg-grayish-400 dark:bg-grayish-600 dark:hover:bg-grayish-500;
	}
	.dark .scrollable::-webkit-scrollbar {
		@apply bg-grayish-700;
	}
	.dark .scrollable::-webkit-scrollbar-track {
		@apply bg-grayish-700;
	}
	.dark .scrollable::-webkit-scrollbar-thumb {
		@apply bg-grayish-800 hover:bg-grayish-700;
	}
	@supports (scrollbar-color: darkgray lightgray) {
		.scrollable {
			scrollbar-width: thin;
			scrollbar-color: theme(colors.grayish.300) theme(colors.grayish.100);
		}
		html[data-theme="dark"].scrollable,
		[data-theme="dark"] .scrollable,
		.dark .scrollable {
			scrollbar-color: theme(colors.grayish.600) theme(colors.grayish.800);
		}
	}

	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		@apply font-baloo2;
	}
}

@layer utilities {
	.hexagon {
		@apply aspect-hexagon;
		clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
	}
	.hexarect {
		clip-path: polygon(0% 50%, 0% 0%, 100% 0%, 100% 50%, 100% 100%, 0% 100%);
	}
	.up-arrow {
		clip-path: polygon(
			50% 0%,
			90% 30%,
			78% 42%,
			58% 25%,
			58% 100%,
			42% 100%,
			42% 25%,
			22% 42%,
			10% 30%
		);
	}

	.parens::before {
		content: "( ";
	}
	.parens::after {
		content: " )";
	}

	@property --perspective {
		syntax: "<length>";
		inherits: false;
		initial-value: 400px;
	}
	@property --angle {
		syntax: "<angle>";
		inherits: false;
		initial-value: 5deg;
	}
	@property --rotateX {
		syntax: "<angle>";
		inherits: false;
		initial-value: 0deg;
	}
	@property --rotateY {
		syntax: "<angle>";
		inherits: false;
		initial-value: 0deg;
	}

	.tilt-down {
		--rotateX: calc(var(--angle) * -1);
	}
	.tilt-up {
		--rotateX: var(--angle);
	}
	.tilt-left {
		--rotateY: calc(var(--angle) * -1);
	}
	.tilt-right {
		--rotateY: var(--angle);
	}
	.tilting-card {
		transform: perspective(var(--perspective)) rotateX(var(--rotateX)) rotateY(var(--rotateY));
		transition: transform 350ms ease;
	}
}
