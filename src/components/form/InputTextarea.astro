---
import type { HTMLAttributes } from "astro/types"
import EmojiPicker from "@components/EmojiPicker.astro"
import { Icon } from "astro-icon/components"

type Props = Omit<HTMLAttributes<"textarea">, "id"> & {
	id: string
	label: string
	allowMarkdown?: boolean
}
const { id, label, class: classList, allowMarkdown = false, ...attrs } = Astro.props
---

<div>
	{
		allowMarkdown && (
			<>
				<div id="toolbar" class="mb-4 flex gap-1">
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatBold"
						title="Bold"
						disabled
					>
						<span class="sr-only">Format as bold</span>
						<Icon class="size-6" name="mdi:format-bold" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatItalic"
						title="Italic"
						disabled
					>
						<span class="sr-only">Format as italic</span>
						<Icon class="size-6" name="mdi:format-italic" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatDel"
						title="Strikethrough"
						disabled
					>
						<span class="sr-only">Format as strikethrough</span>
						<Icon class="size-6" name="mdi:format-strikethrough-variant" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatCode"
						title="Code"
						disabled
					>
						<span class="sr-only">Format as inline code</span>
						<Icon class="size-6" name="mdi:code-tags" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatCodeBlock"
						title="Code Block"
					>
						<span class="sr-only">Format as code block</span>
						<Icon class="size-6" name="mdi:code-block-tags" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnFormatBlockQuote"
						title="Block Quote"
					>
						<span class="sr-only">Format as block quote</span>
						<Icon class="size-6" name="mdi:format-quote-open" aria-hidden="true" />
					</button>
					<button
						class="text-grayish-600 enabled:hover:border-grayish-500 enabled:hover:bg-grayish-50 enabled:hover:text-secondary-600 dark:text-grayish-400 dark:enabled:hover:bg-grayish-900 dark:enabled:hover:text-secondary-400 rounded-sm border border-transparent p-1.5 disabled:opacity-50"
						type="button"
						id="btnEmojiPicker"
						title="Emoji picker"
						popovertarget="divEmojiPicker"
					>
						<span class="sr-only">Emoji picker</span>
						<Icon class="size-6" name="mdi:emoji-outline" aria-hidden="true" />
					</button>
				</div>
				<EmojiPicker />
			</>
		)
	}
	<div class="group relative flex grow items-stretch">
		{
			allowMarkdown && (
				<div
					class="scrollable bg-grayish-100 dark:bg-grayish-900 [&_blockquote]:border-l-grayish-500 absolute inset-0.5 overflow-y-auto rounded-sm px-3.5 pt-2 whitespace-pre-wrap transition-opacity duration-200 group-focus-within:opacity-0 [&_blockquote]:border-l-4 [&_blockquote]:pl-4"
					id="markdown"
					aria-hidden="true"
					data-markdown={allowMarkdown ? "true" : null}
				/>
			)
		}
		<div
			class="border-grayish-400 invisible max-h-48 w-full rounded-sm border-2 px-3.5 pt-2 break-words"
			aria-hidden="true"
			data-ta-div={`div-${id}`}
		>
		</div>
		<textarea
			class:list={[
				"scrollable peer border-grayish-400 bg-grayish-50 text-grayish-900 valid:border-grayish-300 focus:border-secondary-600 dark:bg-grayish-800 dark:text-grayish-100 dark:focus:border-secondary-300 -ml-[100%] h-auto max-h-48 w-full overflow-y-auto rounded-sm border-2 px-3.5 pt-2 placeholder-transparent transition-opacity duration-300 user-invalid:border-red-600 focus:outline-hidden dark:user-invalid:border-red-300",
				classList
			]}
			{id}
			{...attrs}
			data-ta={`textarea-${id}`}
			data-markdown={allowMarkdown ? "true" : null}></textarea>
		<label
			for={id}
			class="bg-grayish-50 text-grayish-600 peer-placeholder-shown:text-grayish-500 peer-focus:text-secondary-700 dark:bg-grayish-800 dark:text-grayish-300 dark:peer-placeholder-shown:text-grayish-300 dark:peer-focus:text-secondary-300 pointer-events-none absolute -top-2.5 left-2 rounded-sm px-2 text-sm transition-all peer-placeholder-shown:top-2 peer-placeholder-shown:text-base peer-focus:-top-2.5 peer-focus:text-sm after:pl-0.5 after:text-red-600 peer-required:after:content-['*'] dark:after:text-red-300"
			>{label}</label
		>
		<div
			class="absolute -bottom-3 left-4 hidden text-xs text-red-600 peer-user-invalid:block dark:text-red-400"
		>
			{`A ${label.toLocaleLowerCase()} is required`}
		</div>
	</div>
</div>

<script>
	import { convertMarkdown, escapeHTML } from "@utils/converters"
	import { getEmoji } from "@utils/emoji"

	const textarea = document.querySelector<HTMLTextAreaElement>("textarea[data-ta]")
	if (textarea) {
		textarea.addEventListener("input", () => {
			const div = document.querySelector<HTMLDivElement>("div[data-ta-div]")
			if (div) {
				div.innerText = textarea.value + String.fromCharCode(10)
			}
		})

		if (textarea.dataset.markdown === "true") {
			const btnFormatBold = document.querySelector<HTMLButtonElement>("#btnFormatBold")
			const btnFormatItalic = document.querySelector<HTMLButtonElement>("#btnFormatItalic")
			const btnFormatDel = document.querySelector<HTMLButtonElement>("#btnFormatDel")
			const btnFormatCode = document.querySelector<HTMLButtonElement>("#btnFormatCode")
			const btnFormatCodeBlock = document.querySelector<HTMLButtonElement>("#btnFormatCodeBlock")
			const btnFormatBlockQuote = document.querySelector<HTMLButtonElement>("#btnFormatBlockQuote")
			const btnEmojiPicker = document.querySelector<HTMLButtonElement>("#btnEmojiPicker")
			const dlgEmojiPicker = document.querySelector<HTMLDialogElement>("#dlgEmojiPicker")

			const injectMarkdown = (ta: HTMLTextAreaElement, mdChar: string) => {
				if (ta?.selectionStart !== ta?.selectionEnd) {
					const previousSelectionStart = ta?.selectionStart
					const previousSelectionEnd = ta?.selectionEnd
					ta.value =
						ta?.value.slice(0, ta?.selectionStart) +
						mdChar +
						ta?.value.slice(ta?.selectionStart, ta?.selectionEnd) +
						mdChar +
						ta?.value.slice(ta?.selectionEnd)
					ta.selectionStart = previousSelectionStart + mdChar.length
					ta.selectionEnd = previousSelectionEnd + mdChar.length
				}
				ta.focus()
			}
			const updateToolbar = (ta: HTMLTextAreaElement) => {
				if (ta.selectionStart === ta.selectionEnd) {
					btnFormatBold!.disabled = true
					btnFormatItalic!.disabled = true
					btnFormatDel!.disabled = true
					btnFormatCode!.disabled = true
				} else {
					btnFormatBold!.disabled = false
					btnFormatItalic!.disabled = false
					btnFormatDel!.disabled = false
					btnFormatCode!.disabled = false
				}
			}
			textarea.addEventListener("keyup", (event) => {
				const ta = event.target as HTMLTextAreaElement
				if (ta.selectionStart === ta.selectionEnd) {
					updateToolbar(ta)
				}
			})

			textarea.addEventListener("mouseup", (event) => {
				const ta = event.target as HTMLTextAreaElement
				if (ta.selectionStart === ta.selectionEnd) {
					updateToolbar(ta)
				}
			})

			textarea.addEventListener("select", (event) => {
				updateToolbar(event.target as HTMLTextAreaElement)
			})

			const divMarkdown = document.querySelector<HTMLDivElement>("div[data-markdown='true']")

			if (divMarkdown) {
				textarea.addEventListener("blur", () => {
					if (divMarkdown) {
						divMarkdown.innerHTML = convertMarkdown(escapeHTML(textarea.value))
						divMarkdown.style.removeProperty("z-index")
					}
				})
				divMarkdown.addEventListener("click", () => {
					textarea.focus()
					divMarkdown.style.setProperty("z-index", "-10")
				})
			}

			if (btnFormatBold) {
				btnFormatBold.addEventListener("click", () => {
					injectMarkdown(textarea, "**")
				})
			}

			if (btnFormatItalic) {
				btnFormatItalic.addEventListener("click", () => {
					injectMarkdown(textarea, "*")
				})
			}

			if (btnFormatDel) {
				btnFormatDel.addEventListener("click", () => {
					injectMarkdown(textarea, "~")
				})
			}

			if (btnFormatCode) {
				btnFormatCode.addEventListener("click", () => {
					injectMarkdown(textarea, "`")
				})
			}

			if (btnFormatCodeBlock) {
				btnFormatCodeBlock.addEventListener("click", () => {
					injectMarkdown(textarea, "\n```\n")
				})
			}

			if (btnFormatBlockQuote) {
				btnFormatBlockQuote.addEventListener("click", () => {
					if (textarea?.selectionStart === 0) {
						textarea.value =
							(textarea.value.charAt(textarea?.selectionStart) === "\n" ? "> \n" : "> ") +
							textarea?.value
					} else {
						const previousLinesIndex = textarea?.value.lastIndexOf(
							"\n",
							textarea.value.charAt(textarea?.selectionStart) === "\n"
								? textarea?.selectionStart - 1
								: textarea?.selectionStart
						)
						const previousLines =
							previousLinesIndex === -1 ? "" : textarea?.value.substring(0, previousLinesIndex + 1)
						const nextLinesIndex = textarea?.value.indexOf("\n", textarea?.selectionStart)
						const nextLines = nextLinesIndex === -1 ? "" : textarea?.value.substring(nextLinesIndex)
						const currentLine = textarea?.value.substring(
							previousLinesIndex === -1 ? 0 : previousLinesIndex + 1,
							nextLinesIndex === -1 ? undefined : nextLinesIndex
						)
						const currentLineBefore =
							previousLines.length === 0 ||
							previousLines.endsWith("\n\n") ||
							(previousLines.endsWith("\n") && previousLines.length === 1)
								? "> "
								: "\n> "
						const currentLineAfter =
							nextLines.length === 0 ||
							nextLines.startsWith("\n\n") ||
							(nextLines.startsWith("\n") && nextLines.length === 1)
								? ""
								: "\n"
						textarea.value = "".concat(
							previousLines,
							currentLineBefore,
							currentLine,
							currentLineAfter,
							nextLines
						)
					}
					textarea.focus()
				})
			}

			document.addEventListener("hfdev-emoji-selected", (e) => {
				const event = e as CustomEvent
				if (event.detail.emoji) {
					const selectedEmoji = getEmoji(event.detail.emoji.codePoint)
					const previousSelectionStart = textarea?.selectionStart
					textarea.value =
						textarea?.value.slice(0, textarea?.selectionStart) +
						selectedEmoji +
						textarea?.value.slice(textarea?.selectionEnd)
					textarea.selectionStart = previousSelectionStart + selectedEmoji.length
					textarea.selectionEnd = textarea.selectionStart
					if (divMarkdown) {
						divMarkdown.innerHTML = convertMarkdown(escapeHTML(textarea.value))
					}
				}
			})
		}
	}
</script>
